{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Video Player <p><code>capacitor-video-player</code></p> <p></p> <p>CAPACITOR 6</p> <p> </p> <p>Special note from Jean Pierre Qu\u00e9au the original founder of this project.</p> <p></p> <p>   Capacitor Video Player Plugin is a custom Native Capacitor plugin to play a video   fullscreen on IOS, Android, Web and Electron platforms  embedded on Web and Electron platforms </p> <p> </p>"},{"location":"#maintainers","title":"Maintainers","text":"Maintainer GitHub Social Active Harmon Wood harmonwood \u2705 Qu\u00e9au Jean Pierre jepiqueau \u274c"},{"location":"#latest-for-capacitor-5-master","title":"LATEST FOR CAPACITOR 5 (Master)","text":""},{"location":"#browser-support","title":"Browser Support","text":"<p>The plugin follows the guidelines from the <code>Capacitor Team</code>,</p> <ul> <li>Capacitor Browser Support</li> </ul> <p>meaning that it will not work in IE11 without additional JavaScript transformations, e.g. with Babel.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>npm install --save capacitor-video-player\nnpx cap sync\nnpx cap sync @capacitor-community/electron\n</code></pre>"},{"location":"#build","title":"Build","text":"<p>Then build YOUR_APPLICATION</p> <pre><code>npm run build\nnpx cap copy\nnpx cap copy web\nnpx cap copy @capacitor-community/electron\nnpx cap open android\nnpx cap open ios\nnpx cap open @capacitor-community/electron\nnpx cap serve\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>No configuration required for this plugin</p>"},{"location":"#supported-methods","title":"Supported methods","text":"Name Android iOS Electron Web initPlayer (mode fullscreen) \u2705 \u2705 \u2705 \u2705 initPlayer (mode embedded) \u274c \u274c \u2705 \u2705 initPlayer (url assets) \u2705 \u2705 \u2705 \u2705 initPlayer (url internal) \u2705 \u2705 \u274c \u274c initPlayer (url application/files) \u2705 \u2705 \u274c \u274c initPlayer (subtitles) \u2705 \u2705 \u274c \u274c initPlayer (headers) \u2705 \u2705 \u274c \u274c initPlayer (title) \u2705 \u2705 \u274c \u274c initPlayer (smallTitle) \u2705 \u2705 \u274c \u274c initPlayer (accentColor) \u2705 \u274c \u274c \u274c initPlayer (chromecast) \u2705 \u274c \u274c \u274c initPlayer (artwork) \u2705 \u2705 \u274c \u274c isPlaying \u2705 \u2705 \u2705 \u2705 play \u2705 \u2705 \u2705 \u2705 pause \u2705 \u2705 \u2705 \u2705 getCurrentTime \u2705 \u2705 \u2705 \u2705 setCurrentTime \u2705 \u2705 \u2705 \u2705 getDuration \u2705 \u2705 \u2705 \u2705 getMuted \u2705 \u2705 \u2705 \u2705 setMuted \u2705 \u2705 \u2705 \u2705 getVolume \u2705 \u2705 \u2705 \u2705 setVolume \u2705 \u2705 \u2705 \u2705 stopAllPlayers \u2705 \u2705 \u2705 \u2705 getRate \u2705 \u2705 \u2705 \u2705 setRate \u2705 \u2705 \u2705 \u2705 showController \u2705 \u274c \u274c \u274c isControllerIsFullyVisible \u2705 \u274c \u274c \u274c exitPlayer \u2705 \u274c \u274c \u274c"},{"location":"#supported-listeners","title":"Supported listeners","text":"Name Android iOS Electron Web jeepCapVideoPlayerReady \u2705 \u2705 \u2705 \u2705 jeepCapVideoPlayerPlay \u2705 \u2705 \u2705 \u2705 jeepCapVideoPlayerPause \u2705 \u2705 \u2705 \u2705 jeepCapVideoPlayerEnded \u2705 \u2705 \u2705 \u2705 jeepCapVideoPlayerExit \u2705 \u2705 \u2705 \u2705"},{"location":"#documentation","title":"Documentation","text":"<p>API_Documentation</p>"},{"location":"#tutorials-blog","title":"Tutorials Blog","text":"<ul> <li>JeepQ Capacitor Plugin Tutorials</li> </ul>"},{"location":"#applications-demonstrating-the-use-of-the-plugin","title":"Applications demonstrating the use of the plugin","text":""},{"location":"#capacitor-5-apps","title":"Capacitor 5 Apps","text":"<ul> <li> <p>ionic7-angular-videoplayer-app</p> </li> <li> <p>vant-nuxt-videoplayer-app</p> </li> </ul>"},{"location":"#application-starter-not-yet-updated-to-500","title":"Application Starter (Not yet updated to 5.0.0)","text":"<ul> <li> <p>angular-video-player-app-starter</p> </li> <li> <p>react-video-player-app-starter</p> </li> <li> <p>vite-react-videoplayer-app</p> </li> <li> <p>vue-videoplayer-app</p> </li> </ul>"},{"location":"#usage-247","title":"Usage 2.4.7","text":"<ul> <li> <p>see capacitor documentation</p> </li> <li> <p>see usage 2.4.7</p> </li> </ul>"},{"location":"#usage-300","title":"Usage &gt; 3.0.0","text":"<ul> <li> <p>see capacitor documentation</p> </li> <li> <p>see usage &gt; 3.0.0</p> </li> </ul>"},{"location":"#dependencies","title":"Dependencies","text":"<ul> <li>hls.js for HLS videos on Web and Electron platforms</li> <li>ExoPlayer for HLS, DASH, SmoothStreaming videos on Android platform</li> </ul>"},{"location":"#contributors","title":"Contributors \u2728","text":"<p>Thanks goes to these wonderful people (emoji key):</p> <sub>Jean Pierre Qu\u00e9au</sub>\ud83d\udcbb <sub>Yelhouti</sub>\ud83d\udcbb <sub>Mamane10</sub>\ud83d\udcbb <sub>\u041f\u0440\u043e\u043d\u0438\u043d \u0410\u043d\u0434\u0440\u0435\u0439 KANekT</sub>\ud83d\udcbb <sub>Michael Rieger</sub>\ud83d\udcbb <sub>Manuel Garc\u00eda Mar\u00edn</sub>\ud83d\udcbb <sub>Jelle Oppenhuis</sub>\ud83d\udcbb <sub>fegauthier</sub>\ud83d\udcbb <sub>Harmon Wood</sub>\ud83d\udcbb <sub>Eduardo Roth</sub>\ud83d\udcbb <p>This project follows the all-contributors specification. Contributions of any kind welcome!</p>"},{"location":"API/","title":"API Documentation","text":""},{"location":"API/#methods-index","title":"Methods Index","text":"<p> <ul> <li><code>echo(...)</code></li> <li><code>initPlayer(...)</code></li> <li><code>isPlaying(...)</code></li> <li><code>play(...)</code></li> <li><code>pause(...)</code></li> <li><code>getDuration(...)</code></li> <li><code>getCurrentTime(...)</code></li> <li><code>setCurrentTime(...)</code></li> <li><code>getVolume(...)</code></li> <li><code>setVolume(...)</code></li> <li><code>getMuted(...)</code></li> <li><code>setMuted(...)</code></li> <li><code>setRate(...)</code></li> <li><code>getRate(...)</code></li> <li><code>stopAllPlayers()</code></li> <li><code>showController()</code></li> <li><code>isControllerIsFullyVisible()</code></li> <li><code>exitPlayer()</code></li> <li>Interfaces</li> </ul> <p> * Listeners</p>"},{"location":"API/#url","title":"Url","text":""},{"location":"API/#from-the-web","title":"from the Web","text":"<p>. <code>http:/..../video.mp4</code> . <code>https:/..../video.mp4</code></p>"},{"location":"API/#from-asset","title":"from Asset","text":"<ul> <li> <p>iOS Plugin   . <code>\"public/assets/video/video.mp4\"</code></p> </li> <li> <p>Android Plugin   . <code>\"public/assets/video/video.mp4\"</code> not anymore the <code>resource/raw folder</code></p> </li> <li> <p>Web &amp; Electron Plugins   . <code>\"assets/video/video.mp4\"</code></p> </li> </ul>"},{"location":"API/#from-application-folder","title":"from Application Folder","text":"<ul> <li> <p>iOS Plugin   . <code>application/files/video.mp4</code> is corresponding to :   /data/Containers/Data/Applications/YOUR_APPLICATION/Documents/files/video.mp4</p> </li> <li> <p>Android Plugin   . <code>application/files/video.mp4</code> is corresponding to :   /data/user/0/YOUR_APPLICATION_PACKAGE/files/video.mp4</p> </li> </ul>"},{"location":"API/#from-your-device-media","title":"from your Device Media","text":"<ul> <li>iOS &amp; Android Plugin only   . <code>internal</code></li> </ul>"},{"location":"API/#from-dcim-folder","title":"from DCIM folder","text":"<ul> <li> <p>Android Plugin    . <code>file:///sdcard/DCIM/Camera/YOUR_VIDEO</code>    . <code>file:///storage/extSdCard/DCIM/Camera/YOUR_VIDEO</code></p> </li> <li> <p>iOS Plugin    . <code>file:///var/mobile/Media/DCIM/100APPLE/YOUR_VIDEO</code>   . <code>file:///var/mobile/Containers/Data/Application/YOUR_APPLICATION_ID/tmp/YOUR_VIDEO</code></p> </li> </ul>"},{"location":"API/#subtitle-android-ios-only","title":"Subtitle (Android, iOS Only)","text":""},{"location":"API/#supported-formats","title":"Supported Formats","text":"<ul> <li> <p>Android Plugin   . <code>WebVTT .vtt extension</code>   . <code>TTML/SMPTE .ttml, .dfxp, .xml extensions</code>   . <code>SubRip .srt extension</code>   . <code>SubStationAlpha .ssa, .ass extensions</code></p> </li> <li> <p>iOS Plugin   . <code>WebVTT .vtt extension</code></p> </li> </ul>"},{"location":"API/#from-the-web_1","title":"from the Web","text":"<p>. <code>http:/..../video.vtt</code> . <code>https:/..../video.vtt</code></p>"},{"location":"API/#from-asset_1","title":"from Asset","text":"<ul> <li> <p>Android Plugin   . <code>\"public/assets/video/video.srt\"</code></p> </li> <li> <p>iOS Plugin   . <code>\"public/assets/video/video.vtt\"</code></p> </li> </ul>"},{"location":"API/#from-application-folder_1","title":"from Application Folder","text":"<ul> <li> <p>Android Plugin   . <code>application/files/video.vtt</code> is corresponding to :   /data/user/0/YOUR_APPLICATION_PACKAGE/files//video.vtt</p> </li> <li> <p>iOS Plugin   . <code>application/files/video.vtt</code> is corresponding to :   /data/Containers/Data/Applications/YOUR_APPLICATION/Documents/files/video.vtt</p> </li> </ul>"},{"location":"API/#from-internal-gallery-dcim","title":"from Internal (Gallery, DCIM)","text":"<ul> <li>Android plugin   .for API higher than 28 add the following in the app manifest file</li> </ul> <p><pre><code>    &lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" android:maxSdkVersion=\"32\"/&gt;\n</code></pre>   and you will be prompted for authorization to access media files. </p>"},{"location":"API/#chromecast-support","title":"Chromecast Support","text":"<p>Android Only</p>"},{"location":"API/#chromecast-explanation","title":"Chromecast explanation","text":"<p>The cast option is enabled by default, otherwise you can disable it with the option chromecast = false in InitPlayer options.</p> <p>Cast button will only be available if your cast devices are connected in the same WIFI network, if not, the button won't be visible.</p> <p>Some videos won't work with Cast, as not every video format is supported.</p> <p>When you start casting, the video controllers will be available to control your cast. If you exit the app or close the video, the cast will end automatically.</p> <p>Cast title will be the same as title and smallTitle, if these are not added, then it will be blank</p>"},{"location":"API/#android-quirks","title":"Android Quirks","text":"<p>Since 3.7.2, you need to add few things in your Android project to get the plugin working.</p> <ul> <li>build.gradle (app)</li> </ul> <pre><code>dependencies {\n    ...\n    implementation 'com.google.android.gms:play-services-cast-framework:21.2.0'\n}\n</code></pre> <ul> <li>AndroidManifest.xml</li> </ul> <pre><code>&lt;application&gt;\n    ...\n    &lt;meta-data\n        android:name=\"com.google.android.gms.cast.framework.OPTIONS_PROVIDER_CLASS_NAME\"\n        android:value=\"com.google.android.exoplayer2.ext.cast.DefaultCastOptionsProvider\" /&gt;\n&lt;/application&gt;\n</code></pre> <ul> <li>MainActivity.java</li> </ul> <pre><code>import android.os.Bundle;\n\nimport com.google.android.gms.cast.framework.CastContext;\n\n\npublic class MainActivity extends BridgeActivity {\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    CastContext.getSharedInstance(this); // &lt;--- add this\n  }\n}\n</code></pre>"},{"location":"API/#methods","title":"Methods","text":"<p>"},{"location":"API/#echo","title":"echo(...)","text":"<pre><code>echo(options: capEchoOptions) =&gt; Promise&lt;capVideoPlayerResult&gt;\n</code></pre> <p>Echo</p> Param Type <code>options</code> <code>capEchoOptions</code> <p>Returns: <code>Promise&lt;capVideoPlayerResult&gt;</code></p>"},{"location":"API/#initplayer","title":"initPlayer(...)","text":"<pre><code>initPlayer(options: capVideoPlayerOptions) =&gt; Promise&lt;capVideoPlayerResult&gt;\n</code></pre> <p>Initialize a video player</p> Param Type <code>options</code> <code>capVideoPlayerOptions</code> <p>Returns: <code>Promise&lt;capVideoPlayerResult&gt;</code></p>"},{"location":"API/#isplaying","title":"isPlaying(...)","text":"<pre><code>isPlaying(options: capVideoPlayerIdOptions) =&gt; Promise&lt;capVideoPlayerResult&gt;\n</code></pre> <p>Return if a given playerId is playing</p> Param Type <code>options</code> <code>capVideoPlayerIdOptions</code> <p>Returns: <code>Promise&lt;capVideoPlayerResult&gt;</code></p>"},{"location":"API/#play","title":"play(...)","text":"<pre><code>play(options: capVideoPlayerIdOptions) =&gt; Promise&lt;capVideoPlayerResult&gt;\n</code></pre> <p>Play the current video from a given playerId</p> Param Type <code>options</code> <code>capVideoPlayerIdOptions</code> <p>Returns: <code>Promise&lt;capVideoPlayerResult&gt;</code></p>"},{"location":"API/#pause","title":"pause(...)","text":"<pre><code>pause(options: capVideoPlayerIdOptions) =&gt; Promise&lt;capVideoPlayerResult&gt;\n</code></pre> <p>Pause the current video from a given playerId</p> Param Type <code>options</code> <code>capVideoPlayerIdOptions</code> <p>Returns: <code>Promise&lt;capVideoPlayerResult&gt;</code></p>"},{"location":"API/#getduration","title":"getDuration(...)","text":"<pre><code>getDuration(options: capVideoPlayerIdOptions) =&gt; Promise&lt;capVideoPlayerResult&gt;\n</code></pre> <p>Get the duration of the current video from a given playerId</p> Param Type <code>options</code> <code>capVideoPlayerIdOptions</code> <p>Returns: <code>Promise&lt;capVideoPlayerResult&gt;</code></p>"},{"location":"API/#getcurrenttime","title":"getCurrentTime(...)","text":"<pre><code>getCurrentTime(options: capVideoPlayerIdOptions) =&gt; Promise&lt;capVideoPlayerResult&gt;\n</code></pre> <p>Get the current time of the current video from a given playerId</p> Param Type <code>options</code> <code>capVideoPlayerIdOptions</code> <p>Returns: <code>Promise&lt;capVideoPlayerResult&gt;</code></p>"},{"location":"API/#setcurrenttime","title":"setCurrentTime(...)","text":"<pre><code>setCurrentTime(options: capVideoTimeOptions) =&gt; Promise&lt;capVideoPlayerResult&gt;\n</code></pre> <p>Set the current time to seek the current video to from a given playerId</p> Param Type <code>options</code> <code>capVideoTimeOptions</code> <p>Returns: <code>Promise&lt;capVideoPlayerResult&gt;</code></p>"},{"location":"API/#getvolume","title":"getVolume(...)","text":"<pre><code>getVolume(options: capVideoPlayerIdOptions) =&gt; Promise&lt;capVideoPlayerResult&gt;\n</code></pre> <p>Get the volume of the current video from a given playerId</p> Param Type <code>options</code> <code>capVideoPlayerIdOptions</code> <p>Returns: <code>Promise&lt;capVideoPlayerResult&gt;</code></p>"},{"location":"API/#setvolume","title":"setVolume(...)","text":"<pre><code>setVolume(options: capVideoVolumeOptions) =&gt; Promise&lt;capVideoPlayerResult&gt;\n</code></pre> <p>Set the volume of the current video to from a given playerId</p> Param Type <code>options</code> <code>capVideoVolumeOptions</code> <p>Returns: <code>Promise&lt;capVideoPlayerResult&gt;</code></p>"},{"location":"API/#getmuted","title":"getMuted(...)","text":"<pre><code>getMuted(options: capVideoPlayerIdOptions) =&gt; Promise&lt;capVideoPlayerResult&gt;\n</code></pre> <p>Get the muted of the current video from a given playerId</p> Param Type <code>options</code> <code>capVideoPlayerIdOptions</code> <p>Returns: <code>Promise&lt;capVideoPlayerResult&gt;</code></p>"},{"location":"API/#setmuted","title":"setMuted(...)","text":"<pre><code>setMuted(options: capVideoMutedOptions) =&gt; Promise&lt;capVideoPlayerResult&gt;\n</code></pre> <p>Set the muted of the current video to from a given playerId</p> Param Type <code>options</code> <code>capVideoMutedOptions</code> <p>Returns: <code>Promise&lt;capVideoPlayerResult&gt;</code></p>"},{"location":"API/#setrate","title":"setRate(...)","text":"<pre><code>setRate(options: capVideoRateOptions) =&gt; Promise&lt;capVideoPlayerResult&gt;\n</code></pre> <p>Set the rate of the current video from a given playerId</p> Param Type <code>options</code> <code>capVideoRateOptions</code> <p>Returns: <code>Promise&lt;capVideoPlayerResult&gt;</code></p>"},{"location":"API/#getrate","title":"getRate(...)","text":"<pre><code>getRate(options: capVideoPlayerIdOptions) =&gt; Promise&lt;capVideoPlayerResult&gt;\n</code></pre> <p>Get the rate of the current video from a given playerId</p> Param Type <code>options</code> <code>capVideoPlayerIdOptions</code> <p>Returns: <code>Promise&lt;capVideoPlayerResult&gt;</code></p>"},{"location":"API/#stopallplayers","title":"stopAllPlayers()","text":"<pre><code>stopAllPlayers() =&gt; Promise&lt;capVideoPlayerResult&gt;\n</code></pre> <p>Stop all players playing</p> <p>Returns: <code>Promise&lt;capVideoPlayerResult&gt;</code></p>"},{"location":"API/#showcontroller","title":"showController()","text":"<pre><code>showController() =&gt; Promise&lt;capVideoPlayerResult&gt;\n</code></pre> <p>Show controller</p> <p>Returns: <code>Promise&lt;capVideoPlayerResult&gt;</code></p>"},{"location":"API/#iscontrollerisfullyvisible","title":"isControllerIsFullyVisible()","text":"<pre><code>isControllerIsFullyVisible() =&gt; Promise&lt;capVideoPlayerResult&gt;\n</code></pre> <p>isControllerIsFullyVisible</p> <p>Returns: <code>Promise&lt;capVideoPlayerResult&gt;</code></p>"},{"location":"API/#exitplayer","title":"exitPlayer()","text":"<pre><code>exitPlayer() =&gt; Promise&lt;capVideoPlayerResult&gt;\n</code></pre> <p>Exit player</p> <p>Returns: <code>Promise&lt;capVideoPlayerResult&gt;</code></p>"},{"location":"API/#interfaces","title":"Interfaces","text":""},{"location":"API/#capvideoplayerresult","title":"capVideoPlayerResult","text":"Prop Type Description <code>result</code> <code>boolean</code> result set to true when successful else false <code>method</code> <code>string</code> method name <code>value</code> <code>any</code> value returned <code>message</code> <code>string</code> message string"},{"location":"API/#capechooptions","title":"capEchoOptions","text":"Prop Type Description <code>value</code> <code>string</code> String to be echoed"},{"location":"API/#capvideoplayeroptions","title":"capVideoPlayerOptions","text":"Prop Type Description <code>mode</code> <code>string</code> Player mode - \"fullscreen\" - \"embedded\" (Web only) <code>url</code> <code>string</code> The url of the video to play <code>subtitle</code> <code>string</code> The url of subtitle associated with the video <code>language</code> <code>string</code> The language of subtitle see https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers <code>subtitleOptions</code> <code>SubTitleOptions</code> SubTitle Options <code>playerId</code> <code>string</code> Id of DIV Element parent of the player <code>rate</code> <code>number</code> Initial playing rate <code>exitOnEnd</code> <code>boolean</code> Exit on VideoEnd (iOS, Android) default: true <code>loopOnEnd</code> <code>boolean</code> Loop on VideoEnd when exitOnEnd false (iOS, Android) default: false <code>pipEnabled</code> <code>boolean</code> Picture in Picture Enable (iOS, Android) default: true <code>bkmodeEnabled</code> <code>boolean</code> Background Mode Enable (iOS, Android) default: true <code>showControls</code> <code>boolean</code> Show Controls Enable (iOS, Android) default: true <code>displayMode</code> <code>string</code> Display Mode [\"all\", \"portrait\", \"landscape\"] (iOS, Android) default: \"all\" <code>componentTag</code> <code>string</code> Component Tag or DOM Element Tag (React app) <code>width</code> <code>number</code> Player Width (mode \"embedded\" only) <code>height</code> <code>number</code> Player height (mode \"embedded\" only) <code>headers</code> <code>{ [key: string]: string; }</code> Headers for the request (iOS, Android) by Manuel Garc\u00eda Mar\u00edn (https://github.com/PhantomPainX) <code>title</code> <code>string</code> Title shown in the player (Android) by Manuel Garc\u00eda Mar\u00edn (https://github.com/PhantomPainX) <code>smallTitle</code> <code>string</code> Subtitle shown below the title in the player (Android) by Manuel Garc\u00eda Mar\u00edn (https://github.com/PhantomPainX) <code>accentColor</code> <code>string</code> ExoPlayer Progress Bar and Spinner color (Android) by Manuel Garc\u00eda Mar\u00edn (https://github.com/PhantomPainX) Must be a valid hex color code default: #FFFFFF <code>chromecast</code> <code>boolean</code> Chromecast enable/disable (Android) by Manuel Garc\u00eda Mar\u00edn (https://github.com/PhantomPainX) default: true <code>artwork</code> <code>string</code> Artwork url to be shown in Chromecast player by Manuel Garc\u00eda Mar\u00edn (https://github.com/PhantomPainX) default: \"\""},{"location":"API/#subtitleoptions","title":"SubTitleOptions","text":"Prop Type Description <code>foregroundColor</code> <code>string</code> Foreground Color in RGBA (default rgba(255,255,255,1) <code>backgroundColor</code> <code>string</code> Background Color in RGBA (default rgba(0,0,0,1) <code>fontSize</code> <code>number</code> Font Size in pixels (default 16)"},{"location":"API/#capvideoplayeridoptions","title":"capVideoPlayerIdOptions","text":"Prop Type Description <code>playerId</code> <code>string</code> Id of DIV Element parent of the player"},{"location":"API/#capvideotimeoptions","title":"capVideoTimeOptions","text":"Prop Type Description <code>playerId</code> <code>string</code> Id of DIV Element parent of the player <code>seektime</code> <code>number</code> Video time value you want to seek to"},{"location":"API/#capvideovolumeoptions","title":"capVideoVolumeOptions","text":"Prop Type Description <code>playerId</code> <code>string</code> Id of DIV Element parent of the player <code>volume</code> <code>number</code> Volume value between [0 - 1]"},{"location":"API/#capvideomutedoptions","title":"capVideoMutedOptions","text":"Prop Type Description <code>playerId</code> <code>string</code> Id of DIV Element parent of the player <code>muted</code> <code>boolean</code> Muted value true or false"},{"location":"API/#capvideorateoptions","title":"capVideoRateOptions","text":"Prop Type Description <code>playerId</code> <code>string</code> Id of DIV Element parent of the player <code>rate</code> <code>number</code> Rate value"},{"location":"API/#listeners","title":"Listeners","text":"<p>The listeners are attached to the plugin not anymore to the DOM document element.</p> Listener Type Description jeepCapVideoPlayerReady capVideoListener Emitted when the video start to play jeepCapVideoPlayerPlay capVideoListener Emitted when the video start to play jeepCapVideoPlayerPause capVideoListener Emitted when the video is paused jeepCapVideoPlayerEnded capVideoListener Emitted when the video has ended jeepCapVideoPlayerExit capExitListener Emitted when the Exit button is clicked"},{"location":"API/#capvideolistener","title":"capVideoListener","text":"Prop Type Description playerId string Id of DIV Element parent of the player currentTime number Video current time when listener trigerred"},{"location":"API/#capexitlistener","title":"capExitListener","text":"Prop Type Description dismiss boolean Dismiss value true or false currentTime number Video current time when listener trigerred"},{"location":"Jean_Pierre_Queau/","title":"Special Note from the Founder Jean Pierre Qu\u00e9au","text":"<p>Note from the Owner</p> <p></p> <p> I have been dedicated to developing and maintaining this plugin for many years since the inception of Ionic Capacitor. Now, at 73+ years old, and with my MacBook Pro becoming obsolete for running Capacitor 6 for iOS, I have made the decision to cease maintenance of the plugin. If anyone wishes to take ownership of this plugin, they are welcome to do so.   </p> <p></p> <p> It has been a great honor to be part of this development journey alongside the developer community. I am grateful to see many of you following me on this path and incorporating the plugin into your applications. Your comments and suggestions have motivated me to continuously improve it.   </p> <p></p> <p> I have made this decision due to several family-related troubles that require my full attention and time. Therefore, I will not be stepping back. Thank you to all of you for your support. </p>"},{"location":"Notes_Exoplayer2.18.1/","title":"Notes from PhantomPainX on using v2.18.1","text":"<p>PR Exoplayer v2.18.1 and some updates - fixes #114</p>"},{"location":"Notes_Exoplayer2.18.1/#updated-dependencies","title":"Updated dependencies","text":"<ul> <li>build.gradle (app)</li> </ul> <pre><code>dependencies {\n    ...\n    implementation 'com.google.android.gms:play-services-cast-framework:21.2.0'\n}\n</code></pre> <ul> <li>build.gradle (capacitor-video-player app)</li> </ul> <pre><code>dependencies {\n    ...\n    implementation 'com.google.android.exoplayer:exoplayer-core:2.18.1'\n    implementation 'com.google.android.exoplayer:exoplayer-ui:2.18.1'\n    implementation 'com.google.android.exoplayer:exoplayer-hls:2.18.1'\n    implementation 'com.google.android.exoplayer:exoplayer-dash:2.18.1'\n    implementation 'com.google.android.exoplayer:exoplayer-smoothstreaming:2.18.1'\n    implementation 'com.google.android.exoplayer:extension-mediasession:2.18.1'\n    implementation 'com.google.android.exoplayer:exoplayer:2.18.1'\n    implementation 'com.google.android.exoplayer:extension-cast:2.18.1'\n    ...\n}\n</code></pre>"},{"location":"Notes_Exoplayer2.18.1/#design-and-ui-fixes","title":"Design and UI fixes","text":"<p>Previously the player used a totally custom UI design. When I updated to exoplayer v2.18.1 I decided to use the default one with some additions: chromecast, pip and resize buttons, titles and back button.</p> <p>The default design comes with some automatic options like subtitle button, speed and audio selection:</p> <p>PlayerView was changed to StyledPlayerView because of that Buttons has now proper DP size. Fade effect when UI hides/show.</p> <p></p>"},{"location":"Notes_Exoplayer2.18.1/#chromecast-mode","title":"Chromecast mode","text":"<p>Previously when using this mode, the player would only show the controls (not stay on screen) with a black background and a message alerting about the cast. This was improved adding an optional param to the initialization called \"artwork\", this image will be shown in the player, media notification panel and lock screen when casting.</p> <ul> <li>The artwork must be a remote URL</li> </ul>"},{"location":"Notes_Exoplayer2.18.1/#chromecast-issues","title":"Chromecast issues","text":"<p>The MediaRouteButton (cast button)</p> <p>It will hide when you enter in PIP or BK mode. The button won't show up unless you restart the app. This only happens in Android 13 (some users of my app reported me this issue and I confirmed it with an OnePlus 8T)</p> <p>As this cast thing can only be tested with real devices, I was only able to test it in my other phone (Samsung Galaxy S9+) with Android 10 and this error didn't happen, so I don't know if this happens in Android 11 and 12.</p> <p>The error is related with addCastStateListener. It fires state 1 (NO_DEVICES_AVAILABLE) when entering in PIP mode or BKMode and never updates the state again.</p> <p>Subtitles are not available yet I tried so hard to get the subtitles working when casting a video but it simple didn't work, sorry for that.</p>"},{"location":"Notes_Exoplayer2.18.1/#why-not-v2182","title":"Why not v2.18.2","text":"<p>It needs a compileSdkVersion of at least 33</p>"},{"location":"Usage_2.4.7/","title":"Usage Release 2.4.7 Documentation","text":"<ul> <li>In your code</li> </ul> <pre><code> import { Component, OnInit } from '@angular/core';\n import { Plugins } from '@capacitor/core';\n import * as WebVPPlugin from 'capacitor-video-player';\n const { CapacitorVideoPlayer,Device } = Plugins;\n\n @Component({\n   tag: 'my-page',\n   styleUrl: 'my-page.css'\n })\n export class MyPage implements OnInit {\n    private _videoPlayer: any;\n    private _url: string;\n    private _handlerPlay: any;\n    private _handlerPause: any;\n    private _handlerEnded: any;\n    private _handlerReady: any;\n    private _handlerExit: any;\n    private _first: boolean = false;\n    private _apiTimer1: any;\n    private _apiTimer2: any;\n    private _apiTimer3: any;\n    private _testApi: boolean = true;\n\n    ...\n    async ngOnInit() {\n      // define the plugin to use\n      const info = await Device.getInfo();\n      if (info.platform === \"ios\" || info.platform === \"android\") {\n        this._videoPlayer = CapacitorVideoPlayer;\n      } else {\n        this._videoPlayer = WebVPPlugin.CapacitorVideoPlayer\n      }\n      // define the video url\n      this._url = \"https://archive.org/download/BigBuckBunny_124/Content/big_buck_bunny_720p_surround.mp4\"\n      // add listeners to the plugin\n      this._addListenersToPlayerPlugin();\n    }\n    async ionViewDidEnter() {\n      ...\n      const res:any  = await this._videoPlayer.initPlayer({mode:\"fullscreen\",url:this._url,playerId:\"fullscreen\",componentTag:\"my-page\"});\n      ...\n\n    }\n\n    private _addListenersToPlayerPlugin() {\n      this._handlerPlay = this._videoPlayer.addListener('jeepCapVideoPlayerPlay', (data:any) =&gt; {\n        console.log('Event jeepCapVideoPlayerPlay ', data);\n        ...\n      }, false);\n      this._handlerPause = this._videoPlayer.addListener('jeepCapVideoPlayerPause', (data:any) =&gt; {\n        console.log('Event jeepCapVideoPlayerPause ', data);\n        ...\n      }, false);\n      this._handlerEnded = this._videoPlayer.addListener('jeepCapVideoPlayerEnded', async (data:any) =&gt; {\n        console.log('Event jeepCapVideoPlayerEnded ', data);\n        ...\n      }, false);\n      this._handlerExit = this._videoPlayer.addListener('jeepCapVideoPlayerExit', async (data:any) =&gt; {\n        console.log('Event jeepCapVideoPlayerExit ', data)\n        ...\n        }, false);\n      this._handlerReady = this._videoPlayer.addListener('jeepCapVideoPlayerReady', async (data:any) =&gt; {\n        console.log('Event jeepCapVideoPlayerReady ', data)\n        console.log(\"testVideoPlayerPlugin testAPI \",this._testApi);\n        console.log(\"testVideoPlayerPlugin first \",this._first);\n        if(this._testApi &amp;&amp; this._first) {\n          // test the API\n          this._first = false;\n          console.log(\"testVideoPlayerPlugin calling isPlaying \");\n          const isPlaying = await this._videoPlayer.isPlaying({playerId:\"fullscreen\"});\n          console.log('const isPlaying ', isPlaying)\n          this._apiTimer1 = setTimeout(async () =&gt; {\n            const pause = await this._videoPlayer.pause({playerId:\"fullscreen\"});\n            console.log('const pause ', pause)\n            const isPlaying = await this._videoPlayer.isPlaying({playerId:\"fullscreen\"});\n            console.log('const isPlaying after pause ', isPlaying)\n            let currentTime = await this._videoPlayer.getCurrentTime({playerId:\"fullscreen\"});\n            console.log('const currentTime ', currentTime);\n            let muted = await this._videoPlayer.getMuted({playerId:\"fullscreen\"});\n            console.log('initial muted ', muted);\n            const setMuted = await this._videoPlayer.setMuted({playerId:\"fullscreen\",muted:!muted.value});\n            console.log('setMuted ', setMuted);\n            muted = await this._videoPlayer.getMuted({playerId:\"fullscreen\"});\n            console.log('const muted ', muted);\n            const duration = await this._videoPlayer.getDuration({playerId:\"fullscreen\"});\n            console.log(\"duration \",duration);\n            // valid for movies havin a duration &gt; 25\n            const seektime = currentTime.value + 0.5 * duration.value &lt; duration.value -25 ? currentTime.value + 0.5 * duration.value\n                            : duration.value -25;\n            const setCurrentTime = await this._videoPlayer.setCurrentTime({playerId:\"fullscreen\",seektime:(seektime)});\n            console.log('const setCurrentTime ', setCurrentTime);\n            const play = await this._videoPlayer.play({playerId:\"fullscreen\"});\n            console.log(\"play \",play);\n            this._apiTimer2 = setTimeout(async () =&gt; {\n              const setMuted = await this._videoPlayer.setMuted({playerId:\"fullscreen\",muted:false});\n              console.log('setMuted ', setMuted);\n              const setVolume = await this._videoPlayer.setVolume({playerId:\"fullscreen\",volume:0.5});\n              console.log(\"setVolume \",setVolume);\n              const volume = await this._videoPlayer.getVolume({playerId:\"fullscreen\"});\n              console.log(\"Volume \",volume);\n              this._apiTimer3 = setTimeout(async () =&gt; {\n                const pause = await this._videoPlayer.pause({playerId:\"fullscreen\"});\n                console.log('const pause ', pause);\n                const duration = await this._videoPlayer.getDuration({playerId:\"fullscreen\"});\n                console.log(\"duration \",duration);\n                const volume = await this._videoPlayer.setVolume({playerId:\"fullscreen\",volume:1.0});\n                console.log(\"Volume \",volume);\n                const setCurrentTime = await this._videoPlayer.setCurrentTime({playerId:\"fullscreen\",seektime:(duration.value - 3)});\n                console.log('const setCurrentTime ', setCurrentTime);\n                const play = await this._videoPlayer.play({playerId:\"fullscreen\"});\n                console.log('const play ', play);\n              }, 10000);\n            }, 10000);\n\n          }, 5000);\n        }\n      }, false);\n\n    }\n    ...\n }\n</code></pre> <p>then in my-page.html</p> <pre><code>...\n&lt;!-- Mandatory id=\"fullscreen\" --&gt;\n&lt;div id=\"fullscreen\" slot=\"fixed\"&gt;&lt;/div&gt;\n...\n</code></pre>"},{"location":"Usage_2.4.7/#usage-on-pwa","title":"Usage on PWA","text":"<ul> <li>in your code</li> </ul> <pre><code>import {  CapacitorVideoPlayer } from 'capacitor-video-player';\n @Component( ... )\n export class MyPage {\n    private _videoPlayer: any;\n    private _url: string;\n    private _handlerPlay: any;\n    private _handlerPause: any;\n    private _handlerEnded: any;\n    private _handlerReady: any;\n    private _handlerPlaying: any;\n    private _handlerExit: any;\n\n    componentWillLoad() {\n      ...\n      this._videoPlayer = CapacitorVideoPlayer;\n      this._url = \"https://archive.org/download/BigBuckBunny_124/Content/big_buck_bunny_720p_surround.mp4\";\n      this._addListenersToPlayerPlugin();\n      ...\n    }\n    async componentDidLoad() {\n      ...\n      const res:any  = await videoPlayer.initPlayer({mode:\"fullscreen\",url:this._url,playerId=\"fullscreen\",componentTag=\"my-page\"});\n      console.log('result of init ', res)\n      ...\n    }\n    private _addListenersToPlayerPlugin() {\n      this._handlerPlay = this._videoPlayer.addListener('jeepCapVideoPlayerPlay', (data:any) =&gt; {\n        console.log('Event jeepCapVideoPlayerPlay ', data);\n        ...\n      }, false);\n      this._handlerPause = this._videoPlayer.addListener('jeepCapVideoPlayerPause', (data:any) =&gt; {\n        console.log('Event jeepCapVideoPlayerPause ', data);\n        ...\n      }, false);\n      this._handlerEnded = this._videoPlayer.addListener('jeepCapVideoPlayerEnded', async (data:any) =&gt; {\n        console.log('Event jeepCapVideoPlayerEnded ', data);\n        ...\n      }, false);\n      this._handlerExit = this._videoPlayer.addListener('jeepCapVideoPlayerExit', async (data:any) =&gt; {\n        console.log('Event jeepCapVideoPlayerExit ', data)\n        ...\n        }, false);\n      this._handlerReady = this._videoPlayer.addListener('jeepCapVideoPlayerReady', async (data:any) =&gt; {\n        console.log('Event jeepCapVideoPlayerReady ', data)\n        ...\n      }, false);\n      this._handlerPlaying = this._videoPlayer.addListener('jeepCapVideoPlayerPlaying', async (data:any) =&gt; {\n        console.log('Event jeepCapVideoPlayerPlaying ', data)\n        ...\n      }, false);\n\n    }\n    render() {\n      return (\n        &lt;Host&gt;\n          &lt;slot&gt;\n            &lt;div id=\"fullscreen\"&gt;\n\n            &lt;/div&gt;\n          &lt;/slot&gt;\n        &lt;/Host&gt;\n      );\n    }\n }\n</code></pre> <pre><code>npm run build\nnpx cap copy\nnpx cap copy web\nnpm start\n</code></pre>"},{"location":"Usage_3.0.0/","title":"Usage Release 3.0.0 Documentation","text":"<ul> <li>In your code</li> </ul> <pre><code>import { Capacitor } from '@capacitor/core';\nimport { CapacitorVideoPlayer } from 'capacitor-video-player';\n\nexport const setVideoPlayer = async (): Promise&lt;any&gt;=&gt; {\n  const platform = Capacitor.getPlatform();\n  return {plugin:CapacitorVideoPlayer, platform};\n};\n</code></pre>"},{"location":"contributing/documentation/","title":"Documentation","text":"<p>This project uses MkDocs to generate the documentation. MkDocs is a static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.</p> <p>This project uses the Material for MkDocs theme.</p>"},{"location":"contributing/documentation/#installation","title":"Installation","text":"<p>To assist in using mkdocs on any environment, mkdocs software can be installed through Micromamba python environment. To install mkdocs, run the following command:</p> <p>Start the python environment by running the following command:</p> macOS/LinuxWindows <pre><code>micromamba activate cap-video\n</code></pre> <pre><code>micromamba activate cap-video\n</code></pre>"},{"location":"contributing/documentation/#serving-the-documentation-locally","title":"Serving the documentation locally","text":"<p>To serve the documentation locally, run the following command:</p> macOS/LinuxWindows <pre><code>mkdocs serve\n</code></pre> <pre><code>mkdocs serve\n</code></pre>"}]}